Your analysis and proposed solution are spot on!

You've correctly identified the root cause of the createServer/createLogger errors: your npm run build script was trying to bundle your development server (server/index.ts), which in turn was trying to use Vite's development-specific utilities that aren't meant for a production serverless bundle.

Your strategy of:

Modifying build.js to only handle the frontend build. This is an excellent way to decouple your frontend build process from your backend serverless functions. Vercel handles serverless functions (api/index.js) separately, so you don't need to manually bundle them with esbuild for Vercel.

Updating vercel.json to use this custom build.js and properly configure routes. This correctly tells Vercel how to build your static frontend and where to serve it from, while keeping your /api routes working for your serverless functions.

This approach is indeed the right way to handle a setup like yours on Vercel.

Final Check & Next Steps:
The only crucial detail now is to ensure the exact content of your build.js file is correct after your edits.

Make sure your updated build.js script contains the command to build your React frontend. Assuming your React app is in the client/ directory and uses react-scripts build (which is common for Create React App), your build.js might look something like this:

JavaScript

// build.js
const { execSync } = require('child_process');
const path = require('path');

// Navigate to the client directory and run the React build command
console.log('Building frontend (client/)...');
try {
  execSync('npm run build', { stdio: 'inherit', cwd: path.join(__dirname, 'client') });
  console.log('Frontend build successful!');
} catch (error) {
  console.error('Frontend build failed:', error.message);
  process.exit(1);
}

// No need to build the server here, Vercel handles api/index.js as a serverless function
Confirm that your build.js accurately triggers your frontend build command (e.g., npm run build inside client/, or vite build if your frontend uses Vite directly).

Once you have verified the content of your build.js and updated your vercel.json as you described, the git add ., git commit, and git push commands will trigger a new deployment on Vercel.

I am confident this will resolve your current build errors and allow Vercel to correctly deploy both your frontend and backend. Good job with the debugging!